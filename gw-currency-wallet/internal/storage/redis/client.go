package redis

import (
	"context"
	"github.com/go-redis/redis/v8" // Импорт официального Redis клиента для Go
	"time"
)

// Options содержит конфигурационные параметры для подключения к Redis
// Используется для гибкой настройки подключения без изменения кода
type Options struct {
	Addr     string // Адрес Redis сервера в формате "host:port"
	Password string // Пароль для аутентификации (пустая строка если не требуется)
	DB       int    // Номер базы данных (обычно 0 для дефолтной)
}

// Client представляет обертку над стандартным redis.Client
// Добавляет уровень абстракции для возможного расширения функционала
// и упрощения замены реализации в будущем
type Client struct {
	*redis.Client // Встраивание стандартного клиента для наследования всех методов
}

// New создает и инициализирует новый клиент Redis
// Параметры:
//   - opts: конфигурация подключения (адрес, пароль, номер БД)
//
// Возвращает:
//   - *Client: готовый к работе клиент
//   - error: ошибка если подключение не удалось
func New(opts Options) (*Client, error) {
	// Создание стандартного клиента Redis с указанными параметрами
	client := redis.NewClient(&redis.Options{
		Addr:     opts.Addr,     // Адрес сервера
		Password: opts.Password, // Пароль (если требуется)
		DB:       opts.DB,       // Номер базы данных
	})

	// Создание контекста с таймаутом 5 секунд для проверки подключения
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel() // Освобождение ресурсов контекста

	// Проверка подключения с помощью команды PING
	if _, err := client.Ping(ctx).Result(); err != nil {
		return nil, err // Возвращаем ошибку если подключение не удалось
	}

	// Возвращаем обернутый клиент если подключение успешно
	return &Client{client}, nil
}
