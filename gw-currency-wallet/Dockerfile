# ==============================================
# Билд стадия (builder) - сборка приложения Go
# ==============================================

# Используем официальный образ Go на базе Alpine Linux (легковесный дистрибутив)
# Версия 1.24.1 - важно фиксировать версию для воспроизводимости сборки
FROM golang:1.24.1-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем ВЕСЬ код проекта в контейнер
# Включая go.mod, go.sum и все исходные файлы
# Это делается до скачивания зависимостей для их кэширования
COPY . .

# Перемещаемся в директорию сервиса wallet
# Это важно, так как пути в Go модулях зависят от расположения
WORKDIR /app/gw-currency-wallet

# Скачиваем все зависимости проекта
# Используем go mod download вместо go mod tidy для воспроизводимости
# Эта команда кэшируется Docker, если не менялись go.mod/go.sum
RUN go mod download

# Компилируем приложение с настройками для production:
# - CGO_ENABLED=0 - отключаем CGO для полностью статического бинарника
# - GOOS=linux - указываем целевую ОС
# - ./cmd/main.go - точка входа в приложение
# Результат сохраняем в /app/bin/wallet
RUN CGO_ENABLED=0 GOOS=linux go build -o /app/bin/wallet ./cmd/main.go

# ==============================================
# Финальная стадия - минимальный образ для запуска
# ==============================================

# Используем минимальный образ Alpine Linux
FROM alpine:latest

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем собранный бинарник из стадии builder
COPY --from=builder /app/bin/wallet .

# Копируем конфигурационный файл
# Важно: config2.env должен содержать все необходимые переменные окружения
COPY --from=builder /app/gw-currency-wallet/config2.env .

# Декларируем порт, который будет использоваться приложением
# Это метаданные для документации, реальное открытие порта делается через docker-compose
EXPOSE 8080

# Команда запуска приложения при старте контейнера
# Используем форму JSON-массива (рекомендованный способ)
CMD ["./wallet"]